 --> Advantage of OOPs over Procedure-oriented programming language
    1) OOPs makes development and maintenance easier, whereas, in a procedure-oriented programming language, it is not easy to manage if 
    code growsas project size increases.

    2) OOPs provides data hiding, whereas, in a procedure-oriented programming language, global data can be accessed from anywhere.

    3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem 
    if we are using the Object-Oriented Programming language.
 
 -->Object Oriented Programming is considered as a design methodology for building non-rigid software. In OOPS, every logic is written to get our 
    work done, but represented in form of Objects. OOP allows us to break our problems into small unit of work that is represented via objects and 
    their functions. We build functions around  objects.
 
 -->There are mainly four pillars (features) of OOP. If all of these four features are presented in programming, the programming is called  
    perfect Object Oriented Programming.
        Abstraction
        Encapsulation
        Inheritance
        Polymorphism

 -->Object 
    Any real world entity which can have some characteristics or which can perform some tasks is called as Object. 
    This object is also called an instance i.e. a copy of entity in programming language. If we consider the above example, a mobile manufacturing 
    company can be an object. Each object can be different based on their characteristics. For example, here are two objects.
        Mobile mbl1 = new Mobile ();  
        Mobile mbl2 = new Mobile ();  

    persons are also objects and each person is different based on his/her characteristics.
    cars are also objects and each car is different based on its model, brand and properties, attributes, functionalities.
    Banks are also objects. 

 -->Class
    A class in OOP is a plan which describes the object. We call it a blueprint of how the object should be represented. Mainly a class would 
    consist of a name, attributes, and operations. Considering the above example, the Mobile can be a class, which has some attributes like 
    Profile Type, IMEI Number, Processor, and some more. It can have operations like Dial, Receive and SendMessage.
    Or we can say a class is a structure that describes the object.

    Collection of objects is called class. It is a logical entity, where as an object is a physical entity, it has storage memory space.

    Suppose a person is a class, it has attributes like name, age, and functionalities like walk, eat, run. And instances of this class are 
    different persons.

    for the mobile example below is the class.

    public class Mobile  
    {  
        private string IEMICode { get; set; }  
        public string SIMCard { get; set; }  
        public string Processor { get; }  
        public int InternalMemory { get; }  
        public bool IsSingleSIM { get; set; }  
    
        public void GetIEMICode()  
        {  
            Console.WriteLine("IEMI Code - IEDF34343435235");  
        }  
    
        public void Dial()  
        {  
            Console.WriteLine("Dial a number");  
        }  
        public void Receive()  
        {  
            Console.WriteLine("Receive a call");  
        }  
        public virtual void SendMessage()  
        {  
            Console.WriteLine("Message Sent");  
        }  
    }  

 --> Abstraction
    Abstraction allows us to expose limited data and functionality of objects publicly and hide the actual implementation. It is the most 
    important pillar in OOPS. In our example of Mobile class and objects like Nokia, Samsung, IPhone.
    
    Some features of mobiles,
    Dialing a number call some method internally which concatenate the numbers and displays it on screen but what is it doing we don’t know.
    Clicking on green button actual send signals to calling person's mobile but we are unaware of how it is doing.
    This is called abstraction. In classes, we can create methods that can be called and used by the users of the 
    class but users will have no idea what these methods do internally. 

    public void Dial()  
    {  
        //Write the logic  
        Console.WriteLine("Dial a number");
    } 

    If we think of a person, he can see the things, but how he sees, the mechanism is hidden.
    If we think of a car we know when press the break pad, car stops but we are not aware how exactly its implemented internally.
    In e commerce websites, when ever a person search the things, say like he searches mobile, he gets list of mobiles, but behind 
    there is lot of things happening.

 --> Encapsulation
    Encapsulation is defined as the process of enclosing one or more details from outside world through access right. It says how much 
    access should be given to particular details. Both Abstraction & Encapsulation works hand in hand because Abstraction says what details 
    to be made visible and Encapsulation provides the level of access right to that visible details. i.e. – It implements the desired level 
    of abstraction.

    As in encapsulation, the data in a class is hidden from other classes, so it is also known as data-hiding.
	Encapsulation is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and 
	the data it manipulates.

    Talking about Bluetooth which we usually have it in our mobile. When we switch on a Bluetooth, I am able to connect to another mobile or 
    bluetooth enabled devices but I'm not able to access the other mobile features like dialing a number, accessing inbox etc. This is because, 
    Bluetooth feature is given some level of abstraction. same thing with hotspot connection.

    In a school website a student has accesss only to see the marks not to edit.

    access modifiers we have here are - public, private, protected.

 --> Polymorphism
    Polymorphism can be defined as the ability of using the same name for doing different things. More precisely we say it as 'many forms 
    of single entity'. This play a vital role in the concept of OOPS.

    function area which calculates the area of shape, so like wise area of triangle, cirlce, rectangle.

    when we think of a person's role, he can be father, husband, brother. and a capsule, it is wrapped with different medicines.

    Let's say Samsung mobile has a 5MP camera available i.e. – it is having a functionality of CameraClick(). Now same mobile is having Panorama
     mode available in camera, so functionality would be same but with mode. This type is said to be Static polymorphism or Compile time 
     polymorphism. See the example below:

     public class Samsumg : Mobile  
    {  
        public void GetWIFIConnection()  
        {  
            Console.WriteLine("WIFI connected");  
        }  
    
        //This is one mwthod which shows camera functionality  
        public void CameraClick()  
        {  
            Console.WriteLine("Camera clicked");  
        }  
    
        //This is one overloaded method which shows camera functionality as well but with its camera's different mode(panaroma)  
        public void CameraClick(string CameraMode)  
        {  
            Console.WriteLine("Camera clicked in " + CameraMode + " Mode");  
        }  
    }

    Compile time polymorphism the compiler knows which overloaded method it is going to call.
 
    Compiler checks the type and number of parameters passed to the method and decides which method to call and it will give an error if there 
    are no methods that matches the method signature of the method that is called at compile time.

    Another point where in SendMessage was intended to send message to single person at a time but suppose Nokia had given provision for sending
     message to a group at once. i.e. - Overriding the functionality to send message to a group. This type is called Dynamic polymorphism or 
     Runtime polymorphism.
 
    For overriding you need to set the method, which can be overridden to virtual & its new implementation should be decorated with override 
    keyword.
    public class Nokia : Mobile  
    {  
        public void GetBlueToothConnection()  
        {  
            Console.WriteLine("Bluetooth connected");  
        }  
    
        //New implementation for this method which was available in Mobile Class  
        //This is runtime polymorphism  
        public override void SendMessage()  
        {  
            Console.WriteLine("Message Sent to a group");  
        }  
    } 

 --> Inheritance
    Inheritance is the ability to extend the functionality from base entity in new entity belonging to same group. This will help us to reuse 
    the functionality which is already defined before and extend into a new entity. 

    I am inheriting the properties of my father also i am extending some of my own properties.

    Swift car inherits the car class, also it extends its features like  airbags and all.

    There are mainly 4 types of inheritance,
        Single level inheritance
        Multi-level inheritance
        Hierarchical inheritance
        Hybrid inheritance

    -> single level inheritance
        In Single level inheritance, there is single base class & a single derived class i.e. - A base mobile features is extended by Samsung 
        brand. I am a single child inheriting my father.

    -> Multi-level inheritance 
        In Multilevel inheritance, there is more than one single level of derivation. i.e. - After base features are extended by Samsung brand.
        Now Samsung brand has manufactured its new model with new added features or advanced OS like Android OS, v4.4.2 (kitkat). From 
        generalization, getting into more specification.

        I am inheriting my father, my father in return inheriting his father.

        redmin mobile series , note 5, note 6, note 7, note 8, note 9, note 10

    -> Hierarchal inheritance
        In this type of inheritance, multiple derived class would be extended from base class, it's similar to single level inheritance but 
        this time along with Samsung, Nokia is also taking part in inheritance.

        I and my brother inherits my father.

        Animal class is inherited by cat and dog.

        mammals class is inherited by humans, and animals

    ->Hybrid inheritance
        Single, Multilevel, & hierarchal inheritance all together construct a hybrid inheritance.

        public class Mobile  
        {  
            //Properties  
            //Methods  
        }  
        
        public class Samsumg : Mobile  
        {  
            //Properties  
            //Methods  
        }  
        
        public class Nokia : Mobile  
        {  
            //Properties  
        //Methods  
        }  

        public class SamsumgS5 : Samsumg 
        {
            //properties
            //methods
        }


        I am inheriting my father, my cousin inheriting my uncle, my father and my uncle are inheriting my Grand Fther.

--> Interface
    ->multiple inheritance
        Multiple inheritance where derived class will extend from multiple base classes

    Samsung will use the function of multiple Phone (Mobile & Telephone). This would create a confusion for complier to understand which 
    function to be called when any event in mobile is triggered like Dial () where Dial is available in both the Phone i.e. - 
    (Mobile & Telephone). To avoid this confusion C# came with the concept of interface which is different from multiple inheritance actually.
 
    If we take an interface it is similar to a class but without implementation & only declaration of properties, methods, delegates & events. 
    Interface actually enforces the class to have a standard contract to provide all implementation to the interface members. Then what’s is 
    the use of interface when they do not have any implementation? Answer is, they are helpful for having readymade contracts, only we need to 
    implement functionality over this contract.
 
    I mean to say, Dial would remain Dial in case of Mobile or Telephone. It won't be fair if we give different name when its task is to 
    Call the person.
 
    Interface is defined with the keyword 'interface' .All properties & methods with in the interface should be implemented if it is been used. 
    That's the rule of interface.

    interface IMobile  
    {  
    Void Dial();  
    }  
    
    interface ITelephone  
    {  
    void Dial();  
    }  
    
    public class Mobile : IMobile, ITelephone  
    
    {  
        public void Dial()  
        {  
                Console.WriteLine("Dial a number");  
        }     
    }  


 -->   What is the difference between an object-oriented programming language and object-based programming language?
        Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are 
        examples of object-based programming languages.

